package TestProxy;


/*
*
* 代理模式的应用场景：

如果已有的方法在使用的时候需要对原有的方法进行改进，此时有两种办法：

1、修改原有的方法来适应。这样违反了“对扩展开放，对修改关闭”的原则。

2、就是采用一个代理类调用原有的方法，且对产生的结果进行控制。这种方法就是代理模式。

使用代理模式，可以将功能划分的更加清晰，有助于后期维护！

代理模式和装饰模式非常类似，甚至代码都类似。
二者最主要的区别是：代理模式中，代理类对被代理的对象有控制权，
决定其执行或者不执行。而装饰模式中，装饰类对代理对象没有控制权，
只能为其增加一层装饰，以加强被装饰对象的功能，仅此而已
* */
public class TestProxy {
    public static void main(String[] args) {
        Sourceable source = new Proxy();
        source.method();
    }
}
